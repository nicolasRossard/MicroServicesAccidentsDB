package com.insa.clientuiService.web.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import com.insa.clientuiService.entities.Victim;

/**
 * Controller which communicates with Victims DB
 * INFORMATION
 * JPARepository is created. It's possible to use JPAPreository and all functions which are
 * already implemented by using url: LocalHost...../victims (accidents without CAPS)
 * this controller is made manually to use what we saw in class
 * @author Nicolas
 *
 */
@Controller
@RequestMapping(value="/VictimsDB")
public class VictimsDBController {
	private String titleMessage;
	/* Use Eureka */
	@Autowired
	private DiscoveryClient discoveryClient;
	/* List of victims */
	private List<Victim> victims = new ArrayList<Victim>();
	
	
	
	@GetMapping(value="/")
	public ModelAndView victimsDB() {
		System.out.println("/VictimsDB/");
		Map<String, Object> model = new HashMap<String, Object>();
		/* Name HTML PAGE */
		String viewName = "victimsDB/victimsDB-home";
		
		/* Title HTML */
		titleMessage = "Victims Database";
		model.put("titleMessage", titleMessage);		
		
		return new ModelAndView(viewName,model);
	}
	
	
	
	/* Get all victims */
	@GetMapping(value = "/all")
	public ModelAndView getVictims() throws RestClientException, IOException {
		System.out.println("/VictimsDB/all");
		/* Create ModelAndView */
		Map<String, Object> model = new HashMap<String, Object>();
		/* Name HTML PAGE */
		String viewName = "victimsDB/victimsResults";

		/* Title HTML */
		titleMessage = "Victims List";
		model.put("titleMessage", titleMessage);
		/****************************/
		/* Get VictimURL by Eureka */
		List<ServiceInstance> instances = discoveryClient.getInstances("victim-service");
		/* Get the first instance of victim-service RIBBON TO CHOOSE AUTOMATICALLY */
		ServiceInstance serviceInstance = instances.get(0);

		/* Save the URL */
		String baseUrl = serviceInstance.getUri().toString();

		/* URL findAll */
		baseUrl = baseUrl + "/Victims";
		RestTemplate restTemplate = new RestTemplate();

		/* Get list of victims */
		ResponseEntity<List<Victim>> response = null;
		try {
			response = restTemplate.exchange(baseUrl, HttpMethod.GET, null,
					new ParameterizedTypeReference<List<Victim>>() {
					});
		} catch (Exception ex) {
			System.out.println(ex);
		}
		/* victim List */
		this.victims = response.getBody();

		System.out.println(victims);
		/****************************/
		/* Put victims List in ModelAndView */
		model.put("victimsList", victims);
		/* Number of victims */
		model.put("numberOfVictims", victims.size());
		return new ModelAndView(viewName, model);
	}
	
	/* Get Victims by its numId */
	@GetMapping(value = "/NumVict")
	public ModelAndView showVictimById(@RequestParam(required = true) int idVict)
			throws RestClientException, IOException {
		System.out.println("victimsDB/NumVict/"+idVict);
		
		/* Create ModelAndView */
		Map<String, Object> model = new HashMap<String, Object>();
		String viewName = "victimsDB/victimsResults";
		
		/* Title HTML */
		this.titleMessage = "Victim Information";
		model.put("titleMessage", titleMessage);

		/****************************/
		/* Get VictimURL by Eureka */
		List<ServiceInstance> instances = discoveryClient.getInstances("victim-service");
		/* Get the first instance of victim-service RIBBON TO CHOOSE AUTOMATICALLY */
		ServiceInstance serviceInstance = instances.get(0);

		/* Save the URL */
		String baseUrl = serviceInstance.getUri().toString();

		/* URL get Victim by numVict */
		baseUrl = baseUrl + "/Victims" + "/" + idVict;
		RestTemplate restTemplate = new RestTemplate();

		/* Get list of Victims */
		ResponseEntity<Victim> response = null;
		response = restTemplate.exchange(baseUrl, HttpMethod.GET, null, Victim.class);

		/* Convert response into a list to show correctly */
		this.victims = java.util.Arrays.asList(response.getBody());
		model.put("victimsList", this.victims);
		
		/* Number of Victims */
		model.put("numberOfVictims", this.victims.size());
		return new ModelAndView(viewName, model);
	}
	
	/* Get VictimForm HTML Page */
	@GetMapping("/VictimFormPage")
	public ModelAndView showVictimForm(@RequestParam(required = false, defaultValue = "-1") int numVict,
			@RequestParam(required = false, defaultValue = "-1") int numAcc,
			@RequestParam(required = false, defaultValue = "RAS") String numVeh,
			@RequestParam(required = false, defaultValue = "-1") int catu,
			@RequestParam(required = false, defaultValue = "-1") int grav,
			@RequestParam(required = false, defaultValue = "-1") int sex,
			@RequestParam(required = false, defaultValue = "-1") int birthDate) {

		System.out.println("/VictimFormPage  GET");
		String viewName = "victimsDB/victimForm";
		/* Create ModelAndView */
		Map<String, Object> model = new HashMap<String, Object>();

		/* Check if it's an update or a new Victim */
		boolean isUpdate = false;
		if (numAcc == -1) {
			System.out.println("Create");
			this.titleMessage = "Create a new Victim";
			model.put("victimItem", new Victim());
		} else {
			System.out.println("Update");
			isUpdate = true;
			this.titleMessage = "Update a Victim";
			System.out.println("numVict " + numVict);
			Victim victim = new Victim(numVict, numAcc, numVeh, catu, grav, sex, birthDate);
			System.out.println(victim.toString());
			model.put("victimItem", victim);
		}
		model.put("isUpdate", isUpdate);
		model.put("titleMessage", this.titleMessage);
		return new ModelAndView(viewName, model);
	}
	/* Create Victim Item */
	@PostMapping("/Create")
	public ModelAndView submitVictimItem(Victim victim) {
		System.out.println("VictimsDB/Create");
		
		this.victims = null;
		/* Add victim to the DataBase */
		/* Get Victim URL by Eureka */
		List<ServiceInstance> instances = discoveryClient.getInstances("victim-service");
		/* Get the first instance of victim-service RIBBON TO CHOOSE AUTOMATICALLY */
		ServiceInstance serviceInstance = instances.get(0);

		/* Save the URL */
		String baseUrl = serviceInstance.getUri().toString();

		/* URL findAll */
		baseUrl = baseUrl + "/Victims";
		System.out.println(baseUrl);
		/* Post Victim */
		RestTemplate restTemplate = new RestTemplate();
		HttpEntity<Victim> request = new HttpEntity<>(victim);
		ResponseEntity<Victim> response = restTemplate.exchange(baseUrl, HttpMethod.POST, request, Victim.class);

		/* Check if everything is good */
		Victim victimSave = response.getBody();
		System.out.println(response.getStatusCode() + " " + victimSave.toString());

		/* Redirect Page */
		RedirectView redirectView = new RedirectView();
		//redirectView.setStatusCode(HttpStatus.CREATED);
		redirectView.setUrl("/VictimsDB/all");

		return new ModelAndView(redirectView);
	}
	/* Update Victim Item */
	@PostMapping("/Update")
	public ModelAndView updateVictimItem(Victim victim) {
		System.out.println("/VictimsDB/Update");
		System.out.println(victim.toString());
		this.victims = null;
		/* Update Victim to the DataBase */
		/* Get victim URL by Eureka */
		List<ServiceInstance> instances = discoveryClient.getInstances("victim-service");
		/* Get the first instance of victim-service RIBBON TO CHOOSE AUTOMATICALLY */
		ServiceInstance serviceInstance = instances.get(0);

		/* Save the URL */
		String baseUrl = serviceInstance.getUri().toString();

		/* URL findAll */
		baseUrl = baseUrl + "/Victims" + "/" + victim.getNumVict();

		System.out.println(baseUrl);
		System.out.println(victim.toString());
		/* PUT victim */
		RestTemplate restTemplate = new RestTemplate();
		HttpEntity<Victim> request = new HttpEntity<>(victim);
		ResponseEntity<Victim> response = restTemplate.exchange(baseUrl, HttpMethod.PUT, request, Victim.class);

		/* Check if everything is good */
		Victim victimSave = response.getBody();
		System.out.println(response.getStatusCode() + " " + victimSave.toString());

		/* Redirect Page */
		RedirectView redirectView = new RedirectView();
		//redirectView.setStatusCode(HttpStatus.OK);
		redirectView.setUrl("/VictimsDB/all");

		return new ModelAndView(redirectView);
	}

	/* Delete Victim Item */
	@RequestMapping("/Delete")
	public ModelAndView deleteVictimItem(@RequestParam(required = false) int idVict) {
		System.out.println("/VictimsDB/Delete");
		System.out.println("idAcc=" + idVict);

		/* Delete victim to the DataBase */
		/* Get Victim URL by Eureka */
		List<ServiceInstance> instances = discoveryClient.getInstances("victim-service");
		/* Get the first instance of victim-service RIBBON TO CHOOSE AUTOMATICALLY */
		ServiceInstance serviceInstance = instances.get(0);

		/* Save the URL */
		String baseUrl = serviceInstance.getUri().toString();

		/* URL findAll */
		baseUrl = baseUrl + "/Victims/" + idVict;

		System.out.println(baseUrl);
		/* Delete Victim */
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<Void> response = restTemplate.exchange(baseUrl, HttpMethod.DELETE, null, Void.class);

		/* Check if everything is good */
		System.out.println(response.getStatusCode());

		/* Redirect Page */
		RedirectView redirectView = new RedirectView();
		//redirectView.setStatusCode(HttpStatus.OK);
		redirectView.setUrl("/VictimsDB/all");

		return new ModelAndView(redirectView);

	}
}
